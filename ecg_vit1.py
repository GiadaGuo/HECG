# Copyright (c) Facebook, Inc. and its affiliates.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
Mostly copy-paste from timm library.
https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/vision_transformer.py
"""
import warnings

import math
from functools import partial

import torch
import torch.nn as nn


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def drop_path(x, drop_prob: float = 0., training: bool = False):
    if drop_prob == 0. or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)
    random_tensor.floor_()  # binarize
    output = x.div(keep_prob) * random_tensor
    return output


class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
    """
    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training)


class Mlp(nn.Module):
    """
    传参：Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)
    in_features=dim：384
    hidden_features=mlp_hidden_dim:4*384

    MLP不改变维度

    """
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features) #in_features->hidden_features
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features) #hidden_features->out_features
        self.drop = nn.Dropout(drop)

    def forward(self, x): #x:(128,5,384)
        x = self.fc1(x) #(128,5,384*4)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x) #(128,5,384)
        x = self.drop(x)
        return x


class Attention(nn.Module):
    """
    输入：x (128,5,384)
    输出：
    attn:(128,6,5,5)
    1)对于每批样本（batch size = 128）每个注意力头（6个头）会输出一个 5 × 5 的注意力矩阵
    2)含义：每个token的query对其他token key的"关注程度"
    3）例子：attn[0, 0, 3, 2] = 0.87表示第 0 个样本、第 0 个头里，第 3 个 token 对第 2 个 token 的关注度是 87%

    x:(128,5,384)  融合了“注意力加权信息”的 token 表示
    """
    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0.):
        super().__init__()
        self.num_heads = num_heads #vit_small默认6
        head_dim = dim // num_heads #384//6=64
        self.scale = qk_scale or head_dim ** -0.5

        #线性层将对输入张量的最后一个维度进行线性变换：适配新加的QKV的维度3
        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x): #x:(128,5,384)
        B, N, C = x.shape #B:128,N:5,C:384
        #(128,5,384)->(128,5,384*3)->(128,5,3,6,64)->(3,128,6,5,64)，3是Q,K,V三个矩阵的维度
        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        q, k, v = qkv[0], qkv[1], qkv[2] #q,k,v:(128,6,5,64)

        attn = (q @ k.transpose(-2, -1)) * self.scale #(128,6,5,64)@(128,6,64,5)->(128,6,5,5)
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, N, C) #(128,6,5,5)@(128,6,5,64)->(128,6,5,64)->(128,5,6,64)->(128,5,384)
        x = self.proj(x) #(128,5,384)
        x = self.proj_drop(x)
        return x, attn #x:(128,5,384);attn:(128,6,5,5)


class Block(nn.Module):
    """
    dim默认传参embed_dim：vit_small是384
    """

    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super().__init__()
        self.norm1 = norm_layer(dim) #dim:384
        self.attn = Attention(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop)
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio) #mlp_ratio在vit_small默认是4
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

    def forward(self, x, return_attention=False):
        y, attn = self.attn(self.norm1(x)) #y：(128,5,384);attn:(128,6,5,5)
        if return_attention:
            return attn
        x = x + self.drop_path(y) #残差连接？ x:(128,5,384)
        x = x + self.drop_path(self.mlp(self.norm2(x))) #(128, 5, 384)->(128, 5, 384*4)->(128, 5, 384)
        return x #(128, 5, 384)


class SliceEmbed(nn.Module):
    """
    ECG series to Slice Embedding
    参数来自VIT传入: series_len=series_len[0], slice_len=slice_len, in_chans=in_chans, embed_dim=embed_dim

    input:(B, 12, 1, L),e.g.(128,12,1,160)
    output:  e.g.(128,4,embed_dim)

    """
    def __init__(self, series_len=160, slice_len=40, in_chans=12, embed_dim=768):
        super().__init__()
        num_slices = series_len // slice_len #160//40=4
        self.series_len = series_len
        self.slice_len = slice_len
        self.num_slices = num_slices

        self.proj = nn.Conv2d(in_chans, embed_dim, kernel_size=(1,slice_len), stride=(1,slice_len))

    def forward(self, x):
        B, C, H, W = x.shape #x:(128,12,1,160)
        x = self.proj(x).flatten(2).transpose(1, 2) #(128,12,1,160)->(128,embed_dim,1,4)->(128,embed_dim,4)->(128,4,embed_dim)
        return x

#核心函数
class VisionTransformer(nn.Module):
    """
    Vision Transformer

    以global view为例
    传入数据:images[:2]由MultiCropWrapper处理后的(128,12,1,160)

    实例传参示例——3个实例vit_tiny,vit_small,vit_base给的embed_dim默认值不同：
     model = VisionTransformer(
        slice_len=slice_len, embed_dim=192, depth=12, num_heads=3, mlp_ratio=4,
        qkv_bias=True, norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)

    """


    def __init__(self, series_len=[160], slice_len=40, in_chans=12, num_classes=0, embed_dim=768, depth=12,
                 num_heads=12, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop_rate=0., attn_drop_rate=0.,
                 drop_path_rate=0., norm_layer=nn.LayerNorm, **kwargs):
        super().__init__()
        self.num_features = self.embed_dim = embed_dim

        self.slice_embed = SliceEmbed(
            series_len=series_len[0], slice_len=slice_len, in_chans=in_chans, embed_dim=embed_dim)
        num_slices = self.slice_embed.num_slices

        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim)) #0张量：(1,1,384)
        self.pos_embed = nn.Parameter(torch.zeros(1, num_slices + 1, embed_dim)) #0张量：(1,5,384)
        self.pos_drop = nn.Dropout(p=drop_rate) #默认没元素被置0

        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, depth)]  # stochastic depth decay rule
        self.blocks = nn.ModuleList([ #长度为 depth 的 Block 列表，每个 Block 都是完整的 transformer 子结构
            Block(
                dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
                drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer)
            for i in range(depth)])
        self.norm = norm_layer(embed_dim)

        # Classifier head
        self.head = nn.Linear(embed_dim, num_classes) if num_classes > 0 else nn.Identity()

        trunc_normal_(self.pos_embed, std=.02)
        trunc_normal_(self.cls_token, std=.02)
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def interpolate_pos_encoding(self, x, h,w=1): #x:(128,5,384),w:1,h:160
        """
        位置编码之前根据160采样点计算
        80采样点和后续输入的200采样点对应算出的nslice和N不等，要重新插值

        nslice：实际输入的slice数
        N：160采样点下的slice数
        """
        nslice = x.shape[1] - 1 #nslice:4
        N = self.pos_embed.shape[1] - 1 #N:4
        if nslice == N:
            return self.pos_embed #self.pos_embed:(1,5,384)

        class_pos_embed = self.pos_embed[:, 0] #(1,384)
        slice_pos_embed = self.pos_embed[:, 1:] #(1,4,384)
        dim = x.shape[-1] #dim:384

        # we add a small number to avoid floating point error in the interpolation
        # see discussion at https://github.com/facebookresearch/dino/issues/8
        h0 = h // self.slice_embed.slice_len + 0.1 #e.g.h0=80//40+0.1=2.1，h0是实际采样点对应的num_slices

        #interpolate: (1, N, dim) -> (1, dim, N) -> interpolate -> (1, dim, new_h)
        slice_pos_embed = nn.functional.interpolate(
            slice_pos_embed.permute(0, 2, 1),  # (1, 384, 4)
            size=int(h0),
            mode='linear',
            align_corners=False
        )

        assert int(h0) == slice_pos_embed.shape[-1]
        slice_pos_embed = slice_pos_embed.permute(0, 2, 1).view(1,-1,dim) #(1,4,384)
        return torch.cat((class_pos_embed.unsqueeze(0), slice_pos_embed), dim=1) #拼接(1,1,384)和(1,4,384)->(1,5,384)

    def prepare_tokens(self, x):
        B, nc, w, h = x.shape #x:(128,12,1,160)
        x = self.slice_embed(x)  # patch linear embedding:(128,4,384)

        # add the [CLS] token to the embed patch tokens
        cls_tokens = self.cls_token.expand(B, -1, -1) #cls_tokens：(128,1,384)
        x = torch.cat((cls_tokens, x), dim=1) #x:(128,5,384)

        # add positional encoding to each token
        x = x + self.interpolate_pos_encoding(x,h) #x:(128,5,384)+(1,5,384)->广播->(128,5,384)

        return self.pos_drop(x) #(128,5,384)

    #（global/local）backbone 的 forward
    def forward(self, x):
        x = self.prepare_tokens(x) #x:(128,5,384)，且被实例化为dropout对象
        for blk in self.blocks: #默认12个blocks，不变维度
            x = blk(x)
        x = self.norm(x) #(128,5,384)
        return x[:, 0] # [CLS] token ：(128,384)

    def get_last_selfattention(self, x):
        x = self.prepare_tokens(x)
        for i, blk in enumerate(self.blocks):
            if i < len(self.blocks) - 1:
                x = blk(x)
            else:
                # return attention of the last block
                return blk(x, return_attention=True)

    def get_intermediate_layers(self, x, n=1):
        x = self.prepare_tokens(x)
        # we return the output tokens from the `n` last blocks
        output = []
        for i, blk in enumerate(self.blocks):
            x = blk(x)
            if len(self.blocks) - i <= n:
                output.append(self.norm(x))
        return output


def vit_tiny(slice_len=40, **kwargs):
    model = VisionTransformer(
        slice_len=slice_len, embed_dim=192, depth=12, num_heads=3, mlp_ratio=4,
        qkv_bias=True, norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)
    return model


def vit_small(slice_len=40, **kwargs):
    model = VisionTransformer(
        slice_len=slice_len, embed_dim=384, depth=12, num_heads=6, mlp_ratio=4,
        qkv_bias=True, norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)
    return model


def vit_base(slice_len=40, **kwargs):
    model = VisionTransformer(
        slice_len=slice_len, embed_dim=768, depth=12, num_heads=12, mlp_ratio=4,
        qkv_bias=True, norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)
    return model


#用于DINO训练：3层MLP：输入-隐藏(2048)-输出(k);L2归一化；权重归一化
class DINOHead(nn.Module):
    """
    teacher案例的用法：
    DINOHead(embed_dim=384, args.out_dim=65534, args.use_bn_in_head=False)s
    Input:(128,384)
    output: (128,out_dim)->(128,65534)—— out_dim:DINO 中最后一层输出的维度，用来做 soft label 对比学习
    """
    def __init__(self, in_dim, out_dim, use_bn=False, norm_last_layer=True, nlayers=3, hidden_dim=2048, bottleneck_dim=256):
        super().__init__()
        nlayers = max(nlayers, 1)

        if nlayers == 1:#没有隐藏层了
            self.mlp = nn.Linear(in_dim, bottleneck_dim)
        else:
            #第一层
            layers = [nn.Linear(in_dim, hidden_dim)]
            if use_bn:
                layers.append(nn.BatchNorm1d(hidden_dim))
            layers.append(nn.GELU())
            #除掉第一层(in_dim,hidden_dim)和最后一层(hidden_dim,bottleneck_dim)，增加其余层
            for _ in range(nlayers - 2):
                layers.append(nn.Linear(hidden_dim, hidden_dim))
                if use_bn:
                    layers.append(nn.BatchNorm1d(hidden_dim))
                layers.append(nn.GELU())
            #MLP中的最后一层(output前的那一层就是bottleneck？)
            layers.append(nn.Linear(hidden_dim, bottleneck_dim))

            #列表layers解包后传给nn.Sequential
            #因为平常这么接参数：model = nn.Sequential(nn.Conv2d(1, 10, kernel_size=5),nn.ReLU(),nn.MaxPool2d(kernel_size=2))
            self.mlp = nn.Sequential(*layers) #解包操作符

        # 权重初始化：递归地对模型中的每个子模块调用 _init_weights 方法
        self.apply(self._init_weights)

        #最后一层：权重归一化
        ##torch.nn.utils.weight_norm(module, name='weight', dim=0)：权重归一化
        ### .weight_g:magnitude ，parametrizations.weight.original0(新版本)
        ### .weight_v:direction ，parametrizations.weight.original1(新版本)
        self.last_layer = nn.utils.weight_norm(nn.Linear(bottleneck_dim, out_dim, bias=False))

        # 初始化缩放因子
        ## data.fill_(1)：将 weight_g 的数据填充为 1。
        ## 初始时，缩放因子 g 被设置为 1，权重 w 的初始值将等于方向向量 v 的归一化值
        self.last_layer.weight_g.data.fill_(1)
        # 固定缩放因子，使其在整个训练过程中保持不变
        if norm_last_layer:
            self.last_layer.weight_g.requires_grad = False

    # 初始化 nn.Linear 层的权重（截断正态分布中采样）和偏置（有就设置为0）
    # 参数m 是一个模块（nn.Module 的实例）
    def _init_weights(self, m):
        if isinstance(m, nn.Linear): #检查传入的模块 m 是否是 nn.Linear 的实例
            #截断正态分布初始化函数，它从均值为 0、标准差为 std 的正态分布中采样
            #但会截断超出均值 ±2 标准差的值
            trunc_normal_(m.weight, std=.02)

            #如果存在偏置项，使用 nn.init.constant_ 函数将偏置项初始化为 0
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)

    def forward(self, x):  #(128,384)

        #传入的x示例：拼接好global和local feature的output
        #MultiCropWrapper(nn.Module) forward的输出

        # 3层MLP:in_dim->hidden_dim->bottleneck_dim
        x = self.mlp(x) #(128,256)

        # L2归一化
        ##dim=-1：指定沿着最后一个维度（即 dim=-1）进行归一化
        ##p=2:指定使用 L2 范数归一化
        x = nn.functional.normalize(x, dim=-1, p=2) #(128,256)

        # 权重归一化FC:bottleneck_dim->out_dim
        x = self.last_layer(x) #(128,out_dim)->(128,65534)
        return x #(128,65534)
